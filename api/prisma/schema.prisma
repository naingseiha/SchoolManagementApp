generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  
  directUrl = env("DIRECT_URL")    
}

// Enums
enum Role {
  ADMIN
  CLASS_TEACHER
  SUBJECT_TEACHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

// User Model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(SUBJECT_TEACHER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Student Model
model Student {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  email       String      @unique
  dateOfBirth DateTime
  gender      Gender
  address     String?
  phone       String?
  classId     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  class       Class?      @relation(fields: [classId], references: [id])
  grades      Grade[]
  attendance  Attendance[]

  @@map("students")
}

// Teacher Model
model Teacher {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String   @unique
  phone      String?
  subject    String?
  employeeId String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  classes            Class[]
  subjectAssignments SubjectTeacher[]

  @@map("teachers")
}

// Class Model - âœ… FIXED: Removed subjects relation
model Class {
  id        String   @id @default(uuid())
  name      String
  grade     String
  section   String?
  teacherId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  students  Student[]

  @@map("classes")
}

// Subject Model
model Subject {
  id          String   @id @default(uuid())
  name        String
  nameKh      String?
  nameEn      String?
  code        String   @unique
  description String?
  grade       String
  track       String?
  category    String   @default("core")
  weeklyHours Float    @default(0)
  annualHours Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacherAssignments SubjectTeacher[]
  grades             Grade[]

  @@map("subjects")
}

// Subject-Teacher Assignment (Many-to-Many)
model SubjectTeacher {
  id         String   @id @default(uuid())
  subjectId  String
  teacherId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([subjectId, teacherId])
  @@map("subject_teachers")
}

// Grade Model
model Grade {
  id        String   @id @default(uuid())
  studentId String
  subjectId String
  score     Float
  maxScore  Float
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@map("grades")
}

// Attendance Model
model Attendance {
  id        String           @id @default(uuid())
  studentId String
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("attendance")
}